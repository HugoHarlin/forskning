
function [] = plot_results_fn_v5(t,Y_t,p)
% plots simulation results in one figure and saves them as a jpg.

%% Extracting results
ntot_0 = p.ntot_0;

A = Y_t(end,1:sum(1:p.Xn-1)); % phytoplankton
Rd = Y_t(end,sum(1:p.Xn-1)+1:2*sum(1:p.Xn-1)); % dissolved nutrients
D = Y_t(end,2*sum(1:p.Xn-1) +1 : 3*sum(1:p.Xn-1)); % ditritus
Rs = Y_t(end,3*sum(1:p.Xn-1)+1 : 3*sum(1:p.Xn-1)+ p.Xn-1); % sedimented nutrients
B = Y_t(end, 3*sum(1:p.Xn-1)+ p.Xn :  3*sum(1:p.Xn-1)+ 2*(p.Xn-1)); % benthic algae


%Calculating nutrient content at t = Tend
n_algae_end     = p.volumes_cyl.*A'*p.q;
n_dissolved_end = p.volumes_cyl.*Rd';
n_detritus_end  = p.volumes_cyl.*D';
n_sediment_end  = Rs.*p.Area_bottom_cyl;
n_benthic_end   = B.*p.q_benth.*p.Area_bottom_cyl;
ntot_end        = sum(sum(n_algae_end)) + sum(sum(n_dissolved_end)) + sum(sum(n_detritus_end)) + sum(n_sediment_end) + sum(n_benthic_end);

% creation of refined grid for interpolation.
%[X_vol_new,Y_vol_new] = grid_interpolation_fn(p,100,100);

%% Calculation of the light intensity
I = zeros(sum(1:p.Xn-1),1);
index = 1;
temp = 1;

for j = 1:p.Xn-1 % pooling over each column ( j = column nr)
    int = 0;
    for i = 1:p.Zn - temp % traversing down one column (i = row nr)
        
        if(i == 1)
            dz =  p.Z_vol(i,j);
        else
            dz = p.Z_vol(i,j) - p.Z_vol(i-1,j);
        end
        
        int = int + (p.kD.*D(index) +p.kA*A(index)+ p.kbg)*dz;
        %  I_alt = p.I0 .* exp(-p.I_matrix*(p.kA.*A_temp(:) + p.kD.*D_temp(:)) - p.kbg.*Z_vol_temp(:));
        I(index) =  p.I0 .* exp( -int);
        index = index +1;
    end
    temp = temp +1;
end
p.I = I;

%% Reformatting state variables and light into matrixes
I_matrix  = NaN.*ones(p.Zn-1, p.Xn-1);
A_matrix  = NaN.*ones(p.Zn-1, p.Xn-1);
Rd_matrix = NaN.*ones(p.Zn-1, p.Xn-1);
D_matrix  = NaN.*ones(p.Zn-1, p.Xn-1);

temp = 1;
index = 1;
for j = 1:p.Xn-1 % looping over each column
    for i = 1:p.Zn - temp % traversing down one column (i = row nr)
        I_matrix(i,j) = I(index);
        A_matrix(i,j)  = A(index);
        Rd_matrix(i,j) = Rd(index);
        D_matrix(i,j)  = D(index);
        index = index +1;
    end
    temp = temp +1;
end

% flattened coordinates of grid element centers
x_vol_vec = zeros(1,length(A));
z_vol_vec = zeros(1,length(A));

index = 1;
for j = 1:p.Xn-1
    for i = 1:p.Zn-j
        x_vol_vec(index) = p.X_vol(i,j);
        z_vol_vec(index) = p.Z_vol(i,j);
        index = index +1;
    end
end


% flattened coordinates of grid element centers
%x_vec = zeros(1,sum(2:p.Xn)+p.Xn);
%z_vec = zeros(1,sum(2:p.Xn)+p.Xn);


% X_vec and Z_vec are the coordinates of the grid corneres (nodes),
% flattened in a matrix column by column, in decending order starting from
% the surface.

x_vec(1:p.Xn) =  p.X(:,1);
z_vec(1:p.Xn) =  p.Z(:,1);
index = p.Xn+1;
for j = 2:p.Xn
    for i = 1:p.Zn-j+2
        x_vec(index) = p.X(i,j);
        z_vec(index) = p.Z(i,j);
        index = index +1;
    end
end

%% interpolating bulk state variables for plotting

A_interp_vec = griddata(x_vol_vec,z_vol_vec, A,x_vec,z_vec, 'nearest');
Rd_interp_vec = griddata(x_vol_vec,z_vol_vec, Rd,x_vec,z_vec, 'nearest');
D_interp_vec = griddata(x_vol_vec,z_vol_vec, D,x_vec,z_vec, 'nearest');
A_interp = NaN*ones(p.Xn);
Rd_interp = NaN*ones(p.Xn);
D_interp = NaN*ones(p.Xn);



%  A_interp(:,1) = A_interp_vec(1:p.Xn);
% Rd_interp(:,1) = Rd_interp_vec(1:p.Xn);
% D_interp(:,1) = D_interp_vec(1:p.Xn);
% index = p.Xn+1;
j = 1:p.Xn;
i = 1;
index = 1:p.Xn;

A_interp(j,i) = A_interp_vec(index);
Rd_interp(j,i) = Rd_interp_vec(index);
D_interp(j,i) = D_interp_vec(index);


index =p.Xn+1; % p.Xn+1;
for i =2:p.Xn
    for j=1:p.Zn-i+1
        A_interp(j,i) = A_interp_vec(index);
        Rd_interp(j,i) = Rd_interp_vec(index);
        D_interp(j,i) = D_interp_vec(index);
        index = index +1;
    end
    index = index +1;
end
test = 1;

%% Figure index
figureIndex = 1;
close all

%% Plot of simulation results

if(true)
    font_size = 18;
    
    %% plots of all concentrations in one figure using griddata
    if(true)
        figure(figureIndex)
        figureIndex = figureIndex +1;
        set(gcf, 'Position',  [1730, 50, 1700, 1300]) % for widescreen
        % set(gcf, 'Position',  [0, 0, 1200, 1000]) % if on laptop
        tile_fig =  tiledlayout(3,3,'TileSpacing','Compact');
        tile_fig.Padding = 'compact';
        title_str = "";
        %title_str = "dx: " + num2str(p.dx(1,1)) + "  dz: " + num2str(p.dz(1,1)) + "  Xn: " + num2str(p.Xn) + "  Zn: " + num2str(p.Zn) + "  alpha: " + num2str(p.alpha) + "  kbg: " + num2str(p.kbg) + "";
        
        if(p.stratified)
            title_str = "Stratified. depth: " + num2str(p.thermocline_depth) + ", th: " + num2str(p.thermocline_thickness) + ", " ;
        end
        
        title_str = title_str + "resolution: " + num2str(p.Xn) + " alpha: " + num2str(p.alpha) + " kbg: " + num2str(p.kbg) + "";
        
        
        title(tile_fig,title_str,'FontSize', font_size + 12); % shared title for all plots
        x_aspect = 1.2;
        
        
        % extracting diagonal elements for triangle elements
        
        A_diag = zeros(3*(p.Xn-1),1);
        Rd_diag = zeros(3*(p.Xn-1),1);
        D_diag = zeros(3*(p.Xn-1),1);
        I_diag = zeros(3*(p.Xn-1),1);
        
        i = p.Zn-1;
        index = 1;
        
        for j = 1: p.Xn-1
            A_diag(index:index+2)  = A_matrix(i,j);
            Rd_diag(index:index+2) = Rd_matrix(i,j);
            D_diag(index:index+2)  = D_matrix(i,j);
            I_diag(index:index+2)  =  I_matrix(i,j);
            
            i = i -1;
            index = index +3;
        end
        
        
        % connectivity matrix for the triangle elements of the diagonal.
        T = zeros(p.Xn-1,3);
        counter = 1;
        for i = 1:p.Xn-1
            T(i,:) = 1;
            T(i,1) = counter;
            T(i,2) = counter+1;
            T(i,3) = counter+2;
            counter = counter +3;
        end
        
        % x and z coordinates of the points of the triangle elements of the
        % diagonal
        x_triag = zeros(3*(p.Xn-1),1); % for trisurf to work the vector containing the x-coordinates must be of sufficient length to store unique valeus for all nodes, regardless of values are shared or not.
        z_triag = zeros(3*(p.Xn-1),1);
        
        i = p.Zn;
        idx = 1;
        for j = 1: p.Xn-1
            x_triag(idx) = p.X(i,j);
            x_triag(idx+1) = p.X(i,j);
            x_triag(idx+2) = p.X(i,j+1);
            
            z_triag(idx) = p.Z(i,j);
            z_triag(idx+1) = p.Z(i-1,j);
            z_triag(idx+2) = p.Z(i-1,j);
            
            idx = idx +3;
            i = i -1;
        end
        
        
        test = 1;
        
        %% phytoplankton
        
        test = 1;
        
        % Plots algal density where the values have been interpolated to
        % produce a smooth figure.
        nexttile
        surf(p.X_vol, p.Z_vol, A_matrix,  'edgecolor','none');
        
        % plotting triangular elements
        %surf(p.X,p.Z,A_interp, 'edgecolor','none') % plotting interpolated values of A
        %hold on
        %trisurf(T,x_triag,z_triag,A_diag, 'edgecolor','none') % plotting the diagonal elements
        
        
        
        set(gca, 'Ydir', 'reverse')
        caxis([0 inf]);
        shading(gca,'interp')
        grid off
        az =0;
        el = 90;
        view(az,el);
        
        title("Phytoplankton [mgP/m^3]");
        ylabel("Depth [m]");
        %xlabel("distance from lake center [m]");
        zlabel("Algae concentration [mgP/m^3]");
        colorbar
        colormap(jet)
        pbaspect([1.2 1 1])
        set(gca,'fontSize',font_size);
        z_theory_algae = 1/p.kbg *log((p.I0*(p.Gmax/(p.lbg_A+p.Ad) -1))/p.H); % theoretical maximum depth for benthic growth if light limited,
        z_theory_algae = round( z_theory_algae,2);
        % at this depth the light limited growth is equal to respiration losses and death rate.
        if(z_theory_algae < p.Lmax)
            hold on
            plot3([0; p.W],[ z_theory_algae ; z_theory_algae],[max(max(A))+1, max(max(A))+1], '--','color','black','LineWidth',2); % plotting the max depth line
            mystr = "Max survival depth: " + num2str(z_theory_algae) + "m";
            h = annotation('textbox','String',mystr,'fontsize',font_size -2 ,'EdgeColor','none');
            h.Position=[.115 .635 .3581 .0879];
            hold off
        end
        
        hold off
        
        %% Dissolved nutrients
        nexttile
        
        surf(p.X_vol, p.Z_vol, Rd_matrix,  'edgecolor','none');
        
        % surf(p.X,p.Z,Rd_interp, 'edgecolor','none') % plotting interpolated values of Rd
        % hold on
        % trisurf(T,x_triag,z_triag,Rd_diag, 'edgecolor','none') % plotting the diagonal elements
        
        shading interp
        grid off
        az =0;
        el = 90;
        view(az,el);
        pbaspect([x_aspect 1 1])
        set(gca, 'Ydir', 'reverse')
        set(gca,'fontSize',font_size);
        caxis([0 inf]);
        colorbar
        colormap(jet)
        title("Dissolved nutrients [mgP/m^3]");
        %ylabel("Depth [m]");
        %xlabel("distance from lake center [m]");
        hold off
        
        %% Detritus
        nexttile
        surf(p.X_vol, p.Z_vol, D_matrix,  'edgecolor','none');
        
        % surf(p.X,p.Z,D_interp, 'edgecolor','none') % plotting interpolated values of D
        %hold on
        %trisurf(T,x_triag,z_triag,D_diag, 'edgecolor','none') % plotting the diagonal elements
        
        
        shading interp
        grid off
        az =0;
        el = 90;
        view(az,el);
        pbaspect([x_aspect 1 1])
        set(gca, 'Ydir', 'reverse')
        caxis([0 inf]);
        colorbar
        colormap(jet)
        title("Detritus [mgP/m^3]");
        % ylabel("Depth [m]");
        % xlabel("distance from lake center [m]");
        set(gca,'fontSize',font_size);
        hold off
        
        %% Sediment nutrients
        sed_points = zeros(1,p.Xn-1); % creating points for sediment plot
        sed_points(:) = (p.X(1,2:end) + p.X(1,1:end-1))/2;
        query_points = linspace(0,p.W,200);
        %sed_interp = interp1(sed_points,Rs, query_points,'makima');
        sed_interp = interp1(sed_points,Rs, query_points,'pchip');
        nexttile
        plot(query_points,sed_interp);
        
        %pbaspect([x_aspect 1 1])
        title("Sediment Nutrients [mgP/m^2]");
        ylabel("concentration [mgP/m^2]");
        xlabel("distance from lake center [m]");
        ylim([0 inf]);
        set(gca,'fontSize',font_size);
        
        %% Benthic algae
        % creating points for benthic algae plot
        benth_points = zeros(1,p.Xn-1);
        benth_points(:) = (p.X(1,2:end) + p.X(1,1:end-1))/2;
        query_points = linspace(0,p.W,200);
        %benth_interp = interp1(sed_points,B, query_points,'makima');
        benth_interp = interp1(sed_points,B.*p.q_benth, query_points,'pchip'); % interpolated net growtht values, unit [mgP/(m^2 day)]
        x = [1:(p.W-1)/(p.Xn-1):p.W];
        nexttile
        plot(query_points, benth_interp);
        % pbaspect([x_aspect 1 1])
        title("Benthic Algae [mgP/m^2]");
        ylabel("concentration [mgP/m^2]");
        xlabel("distance from lake center [m]");
        ylim([0 inf]);
        set(gca,'fontSize',font_size);
        hold on
        
        %         max_survival_depth = -1./p.kbg .* log(p.H_benth./( p.I0.*(p.Gmax_benth./p.lbg_benth -1) )); % maximum survival depth of benthic algae assuming no phytoplankton
        %         max_survival_depth_x = p.W*((max_survival_depth./p.Lmax -1)*(p.Lmax/(p.Lmin-p.Lmax)))^(1/p.alpha); % corressponding distance from the lake center
        %
        %
        %         if(  max_survival_depth_x  < p.Lmax && max_survival_depth_x > 0)
        %             xline(max_survival_depth_x, '--'); % marking out the maximum survival depth as a vertical line.
        %         end
        %
        %         % plot of maximal benthic concentration at each point given light
        %         % limitation only.
        %         if(false)
        %             % Available light at the very bottom of the lake, at the center of the
        %             % bottom border of each cell. (previously the light at the center of
        %             % each bottom cell was used, but the light is attenuated a bit more
        %             % than that at the very bottom.)
        %             I_bottom = p.I(end,:).*exp(-( 0.5*(p.Z(end,1:end-1)+ p.Z(end,2:end)) - p.Z_vol(end,:)).*(p.kA.*A(end,:) + p.kD.*D(end,:) + p.kbg));
        %
        %             syms b
        %             B_max = zeros(1, p.Xn-1); % maximum benthic concentration at each point if light limited
        %             for i =1:p.Xn-1
        %                 eq =   p.Gmax_benth./p.kB.*log((p.H_benth + I_bottom(i))./(p.H_benth + I_bottom(i).*exp(-p.kB.*b))) == p.lbg_benth.*b ;
        %                 B_max(i) =  vpasolve(eq,b,1e20);
        %             end
        %             max_benth_interp = interp1(sed_points,B_max.*p.q_benth, query_points,'pchip');
        %
        %             % plot(query_points, max_benth_interp);
        %             hold off
        %         end
        
        %% light/nutrient limitation
        % calculation  of light/nutrient limitation at each point in lake.
        
        X_new = zeros(201); % Mesh-spacing in x-dimension
        Z_new = zeros(201); % Mesh-spacing in y-dimension
        
        for ii=1:201
            X_new(ii,:) = (0:p.W/(200):p.W)'; % even spacing horizontally
        end
        
        for ii=1:201
            Z_new(:,ii) = (0:p.Lmax/(200):p.Lmax)';  % even spacing vertically
        end
        
        
        % coordinates of the center of each grid element
        X_vol_new = zeros(200);
        Z_vol_new = zeros(200);
        
        for jjj=1:200
            for ii =1:200
                x_idx = jjj+1; % Required (static): When using the nested for-loop variable for indexing a sliced array, you must use the variable in plain form, not as part of an expression.
                z_idx = ii+1;
                X_vol_new(ii,jjj) = (X_new(ii,jjj) + X_new(z_idx,jjj) + X_new(ii,x_idx) + X_new(z_idx,x_idx) ) /4;
                Z_vol_new(ii,jjj) = (Z_new(ii,jjj) + Z_new(z_idx,jjj) + Z_new(ii,x_idx) + Z_new(z_idx,x_idx) ) /4;
            end
        end
        
        
        % removing nodes outside the grid.
        jjjj = 200;
        for ii=2:200
            Z_vol_new(ii,jjjj:end) = NaN;
            X_vol_new(ii,jjjj:end) = NaN;
            jjjj = jjjj -1;
        end
        
        
        % Calculating light and nutrient functional responses
        l_lim = I./(I+p.H);
        n_lim = Rd./(Rd+p.M);
        
        l_lim_interp = griddata(p.X_vol(~isnan(p.X_vol)),p.Z_vol(~isnan(p.Z_vol)), l_lim , X_vol_new(~isnan(X_vol_new)),Z_vol_new(~isnan(Z_vol_new)), 'v4'); % interpolates to refined grid.
        n_lim_interp = griddata(p.X_vol(~isnan(p.X_vol)),p.Z_vol(~isnan(p.Z_vol)), n_lim , X_vol_new(~isnan(X_vol_new)),Z_vol_new(~isnan(Z_vol_new)), 'v4'); % interpolates to refined grid.
        
        
        limitation_vec = zeros(length(l_lim_interp),1);
        
        % calculating if nutrient or light limited
        for i=1:length( l_lim_interp)
            if( l_lim_interp(i) >  n_lim_interp(i))
                limitation_vec(i) = -1; % nutrient limited
            else
                limitation_vec(i) = 1; % light limited
            end
            
        end
        
        % allocating lmitation matrix
        limitation_mtrx = NaN*zeros(200);
        
        
        % reformating limitation data into matrix for plotting
        % first column
        limitation_mtrx(:,1) = limitation_vec(1:200);
        
        index = 200;
        for j = 2:1:201-1
            for i = 1:201 -j
                limitation_mtrx(i,j) = limitation_vec(index);
                index = index +1;
            end
            
        end
        
        
        
        z_theory_algae = 1/p.kbg *log((p.I0*(p.Gmax/(p.lbg_A+p.Ad) -1))/p.H); % theoretical maximum depth for benthic growth if light limited,
        % at this depth the light limited growth is equal to respiration losses and death rate.
        z_theory_algae = round( z_theory_algae,2);
        
        nexttile
        surf(X_vol_new,Z_vol_new,limitation_mtrx ,  'edgecolor','none')
        grid off
        pbaspect([x_aspect 1 1])
        az =0;
        el = 90;
        view(az,el);
        set(gca, 'Ydir', 'reverse')
        colormap(jet)
        title("light vs nutrient limitation");
        xlabel("distance from lake center [m]");
        ylabel("Depth [m]");
        set(gca,'fontSize',font_size);
        map = [0 0 0.75; 0.75 0 0];
        colormap(gca,map);
        
        dim = [.82 .15 .3 .3];
        str = '   red - nutrient limited \n blue - light limited';
        annotation('textbox',dim,'String',sprintf(str),'FitBoxToText','on','EdgeColor','none','FontSize',font_size-2);
        
        if(z_theory_algae < p.Lmax)
            hold on
            plot3([0; p.W],[ z_theory_algae ; z_theory_algae],[2 2], '--','color','black','LineWidth',2);
            %mystr = "Max survival depth: " + num2str(z_theory_algae) + "m";
            %h = annotation('textbox','String',mystr,'fontsize',15,'EdgeColor','none');
            %h.Position=[.54 .37 .3581 .0879];
            hold off
            set(gca,'fontSize',font_size);
        end
        
        
        %% nutrients proportions and losses
        t =  nexttile;
        delete(t);
        dim = [.11 .1 .2 .2];
        perc_algae = sum(sum(n_algae_end))/ntot_end;
        perc_dissolved = sum(sum(n_dissolved_end))/ntot_end;
        perc_detritus = sum(sum(n_detritus_end))/ntot_end;
        perc_sediment = sum(n_sediment_end)/ntot_end;
        perc_benthic = sum(n_benthic_end)/ntot_end;
        [x,isterm,dir] = eventfun_V5(t(end),Y_t(end,:)',p);
        str = '';
        str  = append( '______________________________________________', '\n');
        str  = append(str, 'Norm of the time derivatives at steady state: ', num2str(x), ' \n ');
        str  = append(str , 'portion of leaked nutrients: ', num2str(abs((p.ntot_0-ntot_end) /p.ntot_0 )), ' \n ' );
        str  = append(str ,'leaked nutrients [mgP]:      ', num2str(abs(p.ntot_0-ntot_end)), ' \n ');
        str  = append(str , '______________________________________________', '\n');
        str  = append(str ,'portion of nutrients in phytoplankton:        ', num2str(perc_algae), ' \n ');
        str  = append(str ,'portion of nutrients in dissolved nutrients: ', num2str(perc_dissolved), ' \n ');
        str  = append(str ,'portion of nutrients in detritus:                   ', num2str(perc_detritus), ' \n ');
        str  = append(str ,'portion of nutrients in sediment:                ', num2str(perc_sediment), ' \n ');
        str  = append(str ,'portion of nutrients in benthic algae:         ', num2str(perc_benthic));
        textbox = annotation('textbox',dim,'String',sprintf(str),'FitBoxToText','on','EdgeColor','none');
        textbox.FontSize = font_size-4;
        
    end
    
    %% save figure
    
    fig_name = "2D_benthic_results_V5_dx_" + "res_" + strrep(num2str(p.Xn),'.','_') + "_kbg_"+ strrep(num2str(p.kbg),'.','_');
    
    if(p.stratified)
        fig_name = fig_name + "_therm_depth_" + strrep(num2str(p.thermocline_depth),'.','_') +  "_therm_thickness_" + strrep(num2str(p.thermocline_thickness),'.','_');
        fig_name =
    end
    
    saveas(gcf,fig_name,'jpg');
    
end




end