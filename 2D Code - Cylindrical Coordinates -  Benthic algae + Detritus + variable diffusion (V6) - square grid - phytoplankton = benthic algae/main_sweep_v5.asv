
%% a clean slate
%close all
%clear
%clc
tic

%% Implementation details

% Version 5 - detritus + variable diffusion coefficients. square grid, no
% transform! the

% This code implements a system of equations based on the work by Jäger et
% al. (2010) with an additional benthic algal layer at the bottom,
% in two spatial dimensions, using a finite volume method and Gauss divergence
% theorem to solve the system of equations.
% ode15s is used to iterate in time.
%
% Plankton nutrient density stochiometry q is constant, and the lake topography
% is described by an upsidedown cone where the bottom edge is sloped so
% that the lake is deepest in the middle and shallow at the shore. The slope of the
% bottom is governed by an exponent alpha, and half the lake is modelled so that the
% deepest edge corresponds the middle of the lake.
%
% The matrices in this script are indexed so that origo is centered at the center of the lake surface,
% with the z-axis facing downwards and the x-axis facing the lake shore.
%
% Written by Hugo Harlin 2020

%% loop over different background turbidies
%parfor p = 1:3 % looping over diffusion coeff

%% Loop over different turbidities
for p = 1:3
    %p = 1;
    for depth_var =  1 % :3 % looping over thermocline depth
        %depth_var = 1;
        % for x_res_index = [0,1]
        %for therm_depth = [2,5,10,15]
        kbg_index = p;
        %kbg_index = 1;
        tic
        
        %% all parameters are organized in a struct pp for implementation convenience
        pp = struct;
        
        %% Lake topology and Mesh
        % Quantities relating to system size
          pp.Xn   = 21;  % Number of grid-points (width)
          pp.Zn   = 21;  % Number of grid-points (depth)
        
       % res_vec = (10:2:34);
       % pp.Xn   = res_vec(p);  % Number of grid-points (width)
       % pp.Zn   = res_vec(p);  % Number of grid-points (depth)
        
        pp.Lmin = 0; % Minimum lake depth (depth at land-water interface) [m]
        pp.Lmax = 20;  % Maximum lake depth [m]
        pp.W    = 20;  % Lake radius [m]
        alpha_vec = [1, 1.5]; % slopes being looped over.
        alpha_index = 1;
        pp.alpha = alpha_vec(alpha_index);  % Exponent governing the slope of the lake bottom
        
        pp.stratified = 1; % if true, the lake diffusion coefficients are set so that the diffusion coefficient reflect a thermally stratified
        
        if(pp.stratified)
            pp.increased_x_res = 0;
            pp.increased_z_res = 0;
            % lake with an epilimnion at 5 meters, (3 meters wide transition)
            depth_vec = [2, 5, 10, 15];
            
            pp.thermocline_depth = depth_vec(depth_var); % vertical depth at which the water transitions from a well mixed state, the upper boundary of the thermocline [m].
            pp.thermocline_thickness = 3; % the thickness of the thermocline layer [m]
            pp.diff_above_thermocline = 100; % [day^-1]
            pp.diff_in_thermocline = 1; % [day^-1]
            pp.diff_below_thermocline = 10;   % [day^-1]
        end
        
        % Lake Mesh, with an increasing depth from Lmin at the shore to Lmax
        % at the center of the lake (slope = alpha* (Lmin - Lmax)/W).
        % (0,0) is placed at the center of the lake at the surface, y-dim is facing
        % downward and x-dim is facing towards the lake edge
        
        pp.X = zeros(pp.Zn, pp.Xn); % Mesh-spacing in x-dimension
        pp.Z = zeros(pp.Zn, pp.Xn); % Mesh-spacing in y-dimension
        
        for ii=1:pp.Xn
            pp.X(ii,:) = (0:pp.W/(pp.Xn-1):pp.W)'; % even spacing horizontally
        end
        
        for ii=1:pp.Zn
            pp.Z(:,ii) = (0:pp.Lmax/(pp.Zn-1):pp.Lmax)';  % even spacing vertically
        end
        
        
        % Here the grid is refined in the z-direction to increase resolution at
        % the thermocline.
        counter = 0; % counter is used when appending the new rows in the grid
        
        if(pp.stratified)
            
            if(pp.increased_z_res) % horizontal grid refinement (more rows) where the thermocline meets the bottom
                jjjj = 1:pp.Xn;
                for iiii = pp.thermocline_depth+1:  pp.thermocline_depth +  pp.thermocline_thickness +1
                    new_row_1 = (iiii-1+0.25)*(pp.Lmax/(pp.Zn-1))*(1 + (pp.Lmin/pp.Lmax -1)* (pp.X(iiii,jjjj)/pp.W).^(pp.alpha));
                    new_row_2 = (iiii-1+0.50)*(pp.Lmax/(pp.Zn-1))*(1 + (pp.Lmin/pp.Lmax -1)* (pp.X(iiii,jjjj)/pp.W).^(pp.alpha));
                    new_row_3 = (iiii-1+0.75)*(pp.Lmax/(pp.Zn-1))*(1 + (pp.Lmin/pp.Lmax -1)* (pp.X(iiii,jjjj)/pp.W).^(pp.alpha));
                    
                    pp.Z = [ pp.Z(1:iiii + counter,jjjj); new_row_1; new_row_2; new_row_3; pp.Z(((iiii+ counter+1):end),jjjj)];
                    counter = counter + 3; % three new rows are added.
                end
                
                % adding rows to pp.X so that the dimensions don't differ.
                pp.X =  [pp.X; pp.X(1:3* (pp.thermocline_thickness+1),:)];
                pp.Zn = pp.Zn + 3* (pp.thermocline_thickness+1); % updating the count of number of rows in our grid p.Zn
            end
            
            %             if(pp.increased_x_res) % horizontal grid refinement (more columns) where the thermocline meets the bottom.
            %                 x_strat_top = pp.W*((pp.thermocline_depth - pp.Lmax)/(pp.Lmin - pp.Lmax))^(1/pp.alpha); % this is the depth at which the top of the thermocline intersects with the bottom.
            %                 x_strat_bottom = pp.W*((pp.thermocline_depth + pp.thermocline_thickness - pp.Lmax)/(pp.Lmin - pp.Lmax))^(1/pp.alpha); % this is the depth at which the bottom of the thermocline intersects with the bottom.
            %                 x_strat_top = ceil(x_strat_top); % by rounding up to the nearest whole number, ensuring that the variable is compatible as an index and that we dont miss any grid refinement
            %                 x_strat_bottom = floor(x_strat_bottom); % where the thermocline is.
            %
            %
            %                 for ii=1:1:pp.Zn
            %                     pp.X(ii,:) = [0:pp.W/(pp.Xn-1):pp.W]; % even spacing of the grid in x-dimension
            %                 end
            %
            %                 % the grid is compressed in y-dimension, with depth Lmin at the
            %                 % shore and Lmax at the center of the lake.
            %                 tt=1:pp.Zn;
            %
            %                 temp_index = x_strat_bottom +1 ; % index used for concatenating existing Z-matrix with new rows
            %
            %                 for jjj = x_strat_bottom:x_strat_top-1
            %                     %for j = [1]
            %                     num_new_columns = 1;
            %                     new_columns = zeros(pp.Zn,num_new_columns); % new columnds for pp.Z matrix
            %                     temp_X = zeros(pp.Zn,num_new_columns); % new colums for pp.X matrix
            %
            %                     for k = 1:num_new_columns
            %                         new_columns(:,k) = (tt-1)'.*(pp.Lmax/(pp.Zn-1)).*(1 + (pp.Lmin/pp.Lmax -1).*((pp.X(tt, temp_index)+k/( num_new_columns +1) )/pp.W).^(pp.alpha));
            %                         temp_X(:,k) = pp.X(tt,temp_index) + k/(num_new_columns+1);
            %                     end
            %
            %                     pp.X  = [pp.X(:,1:temp_index)  temp_X  pp.X(:,temp_index+1:end)];
            %
            %                     pp.Z = [pp.Z(:,1:temp_index) new_columns pp.Z(:,temp_index+1:end)]; % adding in the new columns in the Z-matrix
            %                     temp_index = temp_index +num_new_columns+1; % adjusting the index where the new rows are to be added.s
            %                 end
            %
            %                 idx = jjj-x_strat_bottom+1;
            %                 pp.Xn = pp.Xn + num_new_columns* (idx);
            %             end
            
        end
        
        % coordinates of the center of each grid element
        X_vol = zeros(pp.Zn-1, pp.Xn-1);
        Z_vol = zeros(pp.Zn-1, pp.Xn-1);
        
        for jjj=1:pp.Xn-1
            for ii =1:pp.Zn-1
                x_idx = jjj+1; % Required (static): When using the nested for-loop variable for indexing a sliced array, you must use the variable in plain form, not as part of an expression.
                z_idx = ii+1;
                X_vol(ii,jjj) = (pp.X(ii,jjj) + pp.X(z_idx,jjj) + pp.X(ii,x_idx) + pp.X(z_idx,x_idx) ) /4;
                Z_vol(ii,jjj) = (pp.Z(ii,jjj) + pp.Z(z_idx,jjj) + pp.Z(ii,x_idx) + pp.Z(z_idx,x_idx) ) /4;
            end
        end
        
        
        % removing nodes outside the grid.
        jjjj = pp.Xn-1;
        for ii=2:pp.Zn-1
            Z_vol(ii,jjjj:end) = NaN;
            X_vol(ii,jjjj:end) = NaN;
            jjjj = jjjj -1;
        end
        
        % Saving values in the struct
        pp.X_vol = X_vol;
        pp.Z_vol = Z_vol;
        
        
        % Calculating the volume of each grid element, assuming rotational symmetry
        % around the z-axis through the lake enter.
        
        volumes_cyl = zeros(pp.Zn-1,pp.Xn-1);
        
        for ii =1:pp.Zn-1
            for jjj =1:pp.Xn-1
                
                x_idx = jjj+1; % loop index is not allowed as part of an expression when indexing array in parfor (sigh)
                z_idx = ii+1;
                
                x1 = pp.X(ii,jjj);
                x2 = pp.X(z_idx,jjj);
                x3 = pp.X(z_idx,x_idx);
                x4 = pp.X(ii,x_idx);
                
                Z1 = pp.Z(ii,jjj);
                Z2 = pp.Z(z_idx,jjj);
                Z3 = pp.Z(z_idx,x_idx);
                Z4 = pp.Z(ii,x_idx);
                
                volumes_cyl(ii,jjj) = 2*pi*( ((x4^3)/3 - (x1^3)/3)*(Z3-Z2-Z4+Z1)/(x3-x2) + ((x4^2)/2 - (x2^2)/2)*(Z2-Z1 - x2*(Z3-Z2-Z4+Z1)/(x3-x2)));
            end
        end
        
        jj = pp.Xn-1;
        for ii=2:pp.Zn-1
            volumes_cyl(ii,jj:end) = NaN;  % removing nodes outside the grid.
            jj = jj -1;
        end
        
        jj = pp.Xn-1;
        for ii =1:pp.Zn-1
            
            z_idx = ii+1;
            x_idx = jj+1;
            
            x1 = pp.X(ii,jj);   % top left
            x2 = pp.X(z_idx,jj); % bottom
            x4 = pp.X(ii,x_idx); % top right
            
            Z1 = pp.Z(ii,jj);   % top left
            Z2 = pp.Z(z_idx,jj); % bottom
            Z4 = pp.Z(ii,x_idx); % top right
            
            slope = abs(Z4-Z2)/(x4-x2); % slope of the bottom segment
            
            volumes_cyl(ii,jj) =   pi/(slope^2)*(1/3*(Z2-Z4)^3 - (pp.Lmax-Z1)*(Z2-Z4)^2 + (pp.Lmax-Z1)^2*(Z2-Z4));% Diagonal triangular elements rotated around the z-axis
            r_circ = (Z2-Z4)*pi*x1^2;
            volumes_cyl(ii,jj) = volumes_cyl(ii,jj) - r_circ;
            
            jj = jj-1;
        end
        pp.volumes_cyl = volumes_cyl(~isnan(volumes_cyl));
        pp.Area_bottom_cyl = Area_bottom_cyl_fn(pp); % area of each grid element on the bottom
        
        %% Model Parameters
        
        %%% Diffusion coefficients are defined below %%%
        pp.I0 = 300;    % Light intensity at the surface [micro-mol photons m^-2 s^-1]
        pp.kA = 0.0003; % Specific light-attenuation coefficient of algal biomass [m^2 mg C^-1]
        pp.kD = 0.0003; % Specific light-attenuation coefficient of detritus [m^2 mg C^-1]
        pp.kB = 0.00003; % Specific light-attenuation coefficient of Benthic biomass [m^2 mg C^-1]
        %kgb_vec = [0 0.2 0.4 0.8 2.0];
        kgb_vec = [0.2 0.6 2.0];
        pp.kbg = kgb_vec(kbg_index);  % Background light-attenuation coefficient [m^-1]
        pp.lbg_A = 0.08; % Specific algal maintenance respiration losses [day^-1]
        pp.Ad = 0.02;    % algal death rate [day^-1]
        pp.M = 1.5;      % Half-saturation constant of algal nutrient uptake [mg P m^-3]
        pp.M_benth = 1.5; % Half-saturation constant of benthic algae nutrient uptake [mgPm^-3]
        pp.Gmax =  1.08;   % Maximum specific phytoplankton production rate [day^-1]
        pp.Gmax_benth =  1.08; % Maximum specific benthic algae production rate [day^-1]
        pp.H = 120.0;         % Half-saturation constant of light-dependent algal production [micro-mol photons m^-2 s^-1]
        pp.H_benth = 120.0;   % Half-saturation constant of light-dependent benthic algal production [micro-mol photons m^-2 s^-1]
        pp.q = 0.0244;        % Algal nutrient quota, Redfield ratio [mgP/mgC]
        pp.q_benth =  0.0244; % Benthic algae nutrient quota, Redfield ratio [mgP/mgC]
        pp.lbg_benth = 0.1;   % Specific benthic algae maintenance respiration losses [day^-1]
        remin_vec = [0, 0.01, 0.02, 0.05, 0.1, 0.2]; % 0.02 is used as default value
        remin_index = 3; %3;
        pp.r = remin_vec(remin_index);  % Specific mineralization rate of sedimented nutrients [day^-1]
        pp.vA = 0.1;          % Algal sinking speed [m day^-1]
        pp.vD = 0.25;     % detritus sinking speed [m day^-1]
        pp.Dbg =  0.02;       % remineralization of detritus in the water column [day^-1]
        pp.resus_Max = 0.02;  % Maximum resuspension rate of the detritus in the sediment [day^-1]
        pp.resus_H = 8;       % half saturation constant of the resuspension rate functional response [m^2 day^-1]
        pp.death_rate = 1;    % coefficient governing the proportion of sinking algae at the bottom that dies.
        % 0 = no death. 1 = all algae that would have sunk through the sediment dies.
        pp.benth_recycling = 0.5; % range: [0,1]. Governs the portion of respired nutrients that are released as dissolved nutrients.
        % the rest is bound in particulate matter in the sediment.
        
        pp.constant_resuspension = 1;
        
        if(pp.constant_resuspension)
            resus_vec = [0, 0.1, 0.2]; % 0.2 is used as default value
            resus_index = 3;
            pp.resus = resus_vec(resus_index);  % resuspension rate of the detritus from the sediment. [day^-1]
        else
            pp.resus_depth = ones(1,pp.Xn-1); % Resuspension rate that varies with depth
            max_resus = 0.2;
            min_resus = 0.002;
            i=(0:pp.Xn-2);
            pp.resus_depth(i) = min_resus +  i*(max_resus- min_resus)/(pp.Xn-2);
        end
        
        %%% periodic mixing
        pp.periodic_mixing = 0; %set to true if periodic mixing is desired
        pp.mixing_frequency = 365; % time between each mixing event [days]
        pp.max_sim_time = 1e+4; %10e+6; % upper bound of the total simulation time if steady state is not reached before then. [days]
        
        %% looping over the diffusion coefficients
        % for diff_index = 1:3 %,1000]
        %for diff_max_z = [1,10,100] %,1000]
        
        %% Diffusion Coefficients
        dx = zeros(pp.Zn-1,pp.Xn-1); % Radial Turbulent-diffusion coefficient [m^2 day^-1]
        dz = zeros(pp.Zn-1,pp.Xn-1); % Vertical Turbulent-diffusion coefficient [m^2 day^-1]
        
        if(~pp.stratified)
            diff_vec =[0, 1,10,100, 1000];
            %diff_max_x =diff_vec(p);
            diff_max_x = diff_vec(4); % horizontal diffusion coefficient at the surface
            %diff_max_z = 100; % vertical diffusion coefficient at the surface
            %diff_min_x = diff_max_x; % horizontal diffusion coefficient at the bottom
            diff_min_z = 100; % diff_max_x; % vertical diffusion coefficient at the bottom
            diff_max_z = 100; % diff_max_x;
            %diff_min_z = diff_max_z; % vertical diffusion coefficient at the bottom
            
            
            % Linearly decreasing diffusion coefficients with the lake depth.
            for j = 1:pp.Xn-1
                for ty = 1:pp.Zn-1
                    dx(ty,j) =  diff_min_x + (diff_max_x-diff_min_x)*(1- pp.Z_vol(ty,j)/pp.Lmax);
                    dz(ty,j) =  diff_min_z + (diff_max_z-diff_min_z)*(1- pp.Z_vol(ty,j)/pp.Lmax);
                end
            end
            
            pp.dx = dx;
            pp.dz = dz;
        end
        
        %pp.dx = diff_max_z.*dx;
        %pp.dz = diff_max_z.*dz;
        
        if(pp.stratified)
            %%%%% manual setting of the diffusion coefficients %%%%
            for x = 1:pp.Xn-1
                for z = 1:pp.Zn-1
                    
                    if(pp.Z_vol(z,x) < pp.thermocline_depth)
                        pp.dx(z,x) =  pp.diff_above_thermocline;
                        pp.dz(z,x) =  pp.diff_above_thermocline;
                    elseif(pp.thermocline_depth < pp.Z_vol(z,x) &&  pp.Z(z,x) < pp.thermocline_depth + pp.thermocline_thickness)
                        pp.dx(z,x) = pp.diff_in_thermocline;
                        pp.dz(z,x) = pp.diff_in_thermocline;
                    else
                        pp.dx(z,x) =  pp.diff_below_thermocline;
                        pp.dz(z,x) =  pp.diff_below_thermocline;
                    end
                end
            end
        end
        
        % removing values outside the grid
        
        jj = pp.Xn-1;
        for ii=2:pp.Zn-1
            pp.dx(ii,jj:end) = NaN;
            pp.dz(ii,jj:end) = NaN;
            jj = jj -1;
        end
        
        test = 1;
        
        %% variable resuspension coefficient
        % A type II functional response function is used to
        %p.resus_depth
        
        %% Inital Conditions
        A0  = 1.0*ones(pp.Zn-1, pp.Xn-1);    % Initial Algal carbon density [mg C m^-3]
        Rd0 = 10.000*ones(pp.Zn-1, pp.Xn-1);  % initial concentration of dissolved nutrients [mg P m^-3]
        D0  = 1.000*ones(pp.Zn-1, pp.Xn-1);  % initial concentration of detritus [mg P m^-3]
        Rs0 = 1.0*ones(1, pp.Xn-1);        % initial concentration of sediment nutrient density [mg P m^-2]
        B0  = 1.00*ones(1, pp.Xn-1);        % initial concentration of benthic algal density [mg C m^-2]
        
        
        
        % removing values outside grid
        jj= pp.Xn-1;
        for ii=2:pp.Zn-1
            A0(ii,jj:end) = NaN; % removing nodes outside the grid.
            Rd0(ii,jj:end) = NaN; % removing nodes outside the grid.
            D0(ii,jj:end) = NaN; % removing nodes outside the grid.
            jj = jj -1;
        end
        
        A0 = A0(~isnan(A0));
        Rd0 = Rd0(~isnan(Rd0));
        D0 = D0(~isnan(D0));
        
        %% calculation of total nutrient content at t=0, (to be conserved)
        n_algae_0 = pp.volumes_cyl.*A0*pp.q;
        n_dissolved_0 = pp.volumes_cyl.*Rd0;
        n_detritus_0 = pp.volumes_cyl.*D0;
        n_sediment_0 = Rs0.*pp.Area_bottom_cyl;
        n_benthic_0 = B0.*pp.q_benth.*pp.Area_bottom_cyl;
        
        pp.ntot_algae_0  = sum(sum(n_algae_0));
        pp.ntot_dissolved_0 = sum(sum(n_dissolved_0));
        pp.ntot_detritus_0 = sum(sum(n_detritus_0));
        pp.ntot_sed_0 = sum(n_sediment_0);
        pp.ntot_benthic_0 = sum(n_benthic_0);
        
        ntot_0 =  pp.ntot_algae_0 + pp.ntot_dissolved_0 + pp.ntot_detritus_0 + pp.ntot_sed_0 + pp.ntot_benthic_0;
        pp. ntot_0 =  ntot_0;
        
        %% state variables
        A = A0; % transpose of matrices in order to use colon notation to reshape to vector form.
        Rd = Rd0;
        D = D0;
        Rs = Rs0;
        B = B0;
        y0 = [A(~isnan(A)); Rd(~isnan(Rd));D(~isnan(D)); Rs(:); B(:)];
        
        %% Simulation of model
        
        
        ode_opts = odeset( 'abstol' , 1e-9 , 'reltol' , 1e-9 , 'Events', @(t,y) eventfun_V5(t,y,pp), 'NonNegative',(1:length(y0)));
        
        if(~pp.periodic_mixing) % no periodic mixing
            %tend = 2000; % end simulation time
            %t_span = [1:tend/30: tend]; % timespan of simulation. The intermediate steps tells ode15s when to save current state of the model.
            %t_span = [1:tend];
            %ode_opts = odeset( 'abstol' , 1e-9 , 'reltol' , 1e-9 , 'Events',@(t,y) eventfun_V5(t,y,p) , 'NonNegative',(1:length(y0)));
            %ode_opts = odeset( 'abstol' , 1e-9 , 'reltol' , 1e-9 , 'NonNegative',find(y0));
            [t,Y_t] = ode15s( @(t,Y) rhs_function_V5(t,Y,pp), [0, inf] , y0 , ode_opts);
            %[t,Y_t] = ode15s( @(t,Y) dAdt_efficient_correct_V5_detritus(t,Y,p) , t_span , y0 , ode_opts);
            
        else % periodic mixing
            t_var = 0; % variable keeping track of the total lapsed simulation time
            res_total = []; % state variables for all time states of the total simulation, analog of Y_t for a single ode15s run
            time_total = []; % this vector will contain the simulation time for the total simulation, analog to the t vector if ode15s is only run once.
            
            while(t_var <  pp.max_sim_time)
                [t,Y_t] = ode15s( @(t,Y) rhs_function_V5(t,Y,pp), [ t_var,  t_var + pp.mixing_frequency] , y0 , ode_opts);
                
                % saving timesteps and state variables
                time_total = [time_total;  t];
                res_total = [res_total; Y_t];
                
                % updating the timekeeping variable
                t_var = t_var +pp.mixing_frequency;
                
                [xx,isterm,dir] = eventfun_V5(t(end),Y_t(end,:)',pp);
                
                if(xx >0) % steady state is not reached and we have arrived at the mixing event
                    %%%%%%%%%%% mixing event %%%%%%%%%%%%
                    % Extracting results
                    A  = Y_t(end,1:(pp.Xn-1)*(pp.Zn-1));
                    Rd = Y_t(end,(pp.Xn-1)*(pp.Zn-1)+1 : 2*(pp.Xn-1)*(pp.Zn-1));
                    D  = Y_t(end,2*(pp.Xn-1)*(pp.Zn-1)+1 : 3*(pp.Xn-1)*(pp.Zn-1));
                    Rs = Y_t(end,3*(pp.Xn-1)*(pp.Zn-1) +1 : 3*(pp.Xn-1)*(pp.Zn-1) + (pp.Xn-1));
                    B  = Y_t(end,3*(pp.Xn-1)*(pp.Zn-1) + (pp.Xn-1)+1: end);
                    
                    % Reshaping the vectors into matrices
                    A  = reshape(A, [pp.Xn-1, pp.Zn-1]);
                    Rd = reshape(Rd, [pp.Xn-1, pp.Zn-1]);
                    D  = reshape(D, [pp.Xn-1, pp.Zn-1]);
                    A  = A';
                    Rd = Rd';
                    D  = D';
                    
                    %Calculating nutrient content in each grid cell at time t
                    n_algae     = pp.volumes_cyl.*A;
                    n_dissolved = pp.volumes_cyl.*Rd;
                    n_detritus  = pp.volumes_cyl.*D;
                    
                    %calculating concentration if well mixed
                    well_mixed_A =  sum(sum(n_algae)) / sum(sum(pp.volumes_cyl));
                    well_mixed_Rd =  sum(sum(n_dissolved)) / sum(sum(pp.volumes_cyl));
                    well_mixed_D = sum(sum(n_detritus)) / sum(sum(pp.volumes_cyl));
                    
                    % new concentration when well mixed
                    A =  well_mixed_A.*ones(pp.Zn-1, pp.Xn-1);  % phytoplankton
                    Rd = well_mixed_Rd.*ones(pp.Zn-1, pp.Xn-1);  % disolved nutrients
                    D = well_mixed_D.*ones(pp.Zn-1, pp.Xn-1);   % detritus
                    
                    y0 = [A(:); Rd(:); D(:); Rs(:); B(:)]; % state variable input for the next function call of ode15s, with the bulk of the lake being well mixed.
                    
                else
                    t_var = pp.max_sim_time +1; % we exit the loop if steady state is reached.
                end
            end
            Y_t = res_total;
            t = time_total;
            
        end
        
        %% extracting results and calculating ntot end
        A = Y_t(end,1:sum(1:pp.Xn-1)); % phytoplankton
        Rd = Y_t(end,sum(1:pp.Xn-1)+1:2*sum(1:pp.Xn-1)); % dissolved nutrients
        D = Y_t(end,2*sum(1:pp.Xn-1) +1 : 3*sum(1:pp.Xn-1)); % ditritus
        Rs = Y_t(end,3*sum(1:pp.Xn-1)+1 : 3*sum(1:pp.Xn-1)+ pp.Xn-1); % sedimented nutrients
        B = Y_t(end, 3*sum(1:pp.Xn-1)+ pp.Xn :  3*sum(1:pp.Xn-1)+ 2*(pp.Xn-1)); % benthic algae
        
        %Calculating nutrient content at t = Tend
        n_algae_end     = pp.volumes_cyl.*A'*pp.q;
        n_dissolved_end = pp.volumes_cyl.*Rd';
        n_detritus_end  = pp.volumes_cyl.*D';
        n_sediment_end  = Rs.*pp.Area_bottom_cyl;
        n_benthic_end   = B.*pp.q_benth.*pp.Area_bottom_cyl;
        ntot_end        = sum(sum(n_algae_end)) + sum(sum(n_dissolved_end)) + sum(sum(n_detritus_end)) + sum(n_sediment_end) + sum(n_benthic_end);
        
        %% recording of simulation time & saving workspace
        pp.simTime = toc;
        
        %%%%%%%%%%% Use this instead %%%%%%%%%%%%%
        %a_str = strrep(a_str,'.','_');
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        %% saving results
        if(1)
            file_name = "2D_benthic_results_V5_alpha_" + strrep(num2str(pp.alpha),'.','_') + "_kbg_" + strrep(num2str(pp.kbg),'.','_');
            file_name = file_name + "_res_" + strrep(num2str(pp.Xn),'.','_');
            if(pp.stratified)
                file_name = file_name +  "_Stratified_therm_depth_" + strrep(num2str(pp.thermocline_depth),'.','_');
                file_name = file_name +  "_thickness_" + strrep(num2str(pp.thermocline_thickness),'.','_');
                file_name = file_name + "_profile_" + num2str(pp.diff_above_thermocline)+ "_" + num2str(pp.diff_in_thermocline) + "_" + num2str(pp.diff_below_thermocline) + "";
                
                if(pp.increased_x_res)
                    file_name = file_name + "_increased_x_res";
                end
            else
                file_name = file_name  +"_dx_" + num2str(diff_max_x) + "_dz_" + num2str(diff_max_z);
            end
            
            if(pp.periodic_mixing)
                file_name = file_name +  "_periodic_mixing_" + num2str(pp.mixing_frequency) + "_end_sim_time_" + num2str( pp.max_sim_time);
            end
            
            
            %file_name = file_name + "_CONV_SIM";
            parsave(file_name,pp,Y_t,t,simTime,y0);
            
        end
        
    end
end
%end

function parsave(fname, p,Y_t,t,simTime,y0)
save(fname, 'p', 'Y_t','t','simTime','y0');
end

